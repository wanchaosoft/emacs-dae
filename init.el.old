(when (>= emacs-major-version 24)
    (require 'package)
    (package-initialize)
    (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
    ("melpa" . "http://elpa.emacs-china.org/melpa/"))))

;; 注意 elpa.emacs-china.org 是 Emacs China 中文社区在国内搭建的一个 ELPA 镜像
;; cl - Common Lisp Extension
(require 'cl)

 ;; Add Packages
 (defvar my/packages '(
                ;; --- Auto-completion ---
                company
                ;; --- Better Editor ---
                hungry-delete
                swiper
                counsel
                smartparens
                ;; --- Major Mode ---
                js2-mode
                ;; --- Minor Mode ---
                nodejs-repl
                exec-path-from-shell
                ;; --- Themes ---
                monokai-theme
                ;; solarized-theme
                ) "Default packages")
(setq package-selected-packages my/packages)

(defun my/packages-installed-p ()
    (loop for pkg in my/packages
        when (not (package-installed-p pkg)) do (return nil)
            finally (return t)))

(unless (my/packages-installed-p)
    (message "%s" "Refreshing package database...")
    (package-refresh-contents)
    (dolist (pkg my/packages)
    (when (not (package-installed-p pkg))
        (package-install pkg))))


 ;; Find Executable Path on OS X
(when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; tool-bar-mode is a Minor Mode.
(tool-bar-mode -1)

;; close scroll fat
(scroll-bar-mode -1)

;; line number
(global-linum-mode 1)

;; default full screen
(setq initial-frame-alist (quote ((fullscreen . maximized))))

;; change cursor style
(setq inhibit-splash-screen 1)
(setq-default cursor-type 'bar)

;; highlight line
(global-hl-line-mode 1)
;; close indent
;; (electric-indent-mode -1)

;; font face
(set-face-attribute 'default nil :height 160)
;; show parenthesis
(add-hook 'emacs-list-mode-hook 'show-paren-mode)
;; theme
(add-to-list 'my/packages 'monokai-theme)
(load-theme 'monokai 1)

;; ;;;;;;;;;;;;;;;;;;;;; quick key ;;;;;;;;;;;;;;;;;;;;;;;;;;

;; quick open configure file
(defun open-init-file()
  (interactive)
  (find-file "~/.emacs.d/init.el")
  )

;; bind open-init-file to "<F2>"
(global-set-key (kbd "<f2>") 'open-init-file)

;; open company-mode
(global-company-mode 1)

;; close backup
(setq make-backup-files nil)

;;
(require 'recentf)
(recentf-mode 1)
;; show recent 10 files
(setq recentf-max-menu-items 10)
;; bind "C-x C-r" to this
(global-set-key (kbd "C-x C-r") 'recentf-open-files)

;; when you select numeric lines, you input a,will delete them.
(delete-selection-mode 1)

;; find-function "C-h C-f"
;; find-variable "C-h C-v"
;; find-function-on-key "C-h C-k"


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;; javascript IDE ;;;;;
;;(setq auto-mode-alist
;;      (append
;;      '(("\\.js\\'" . js2-mode))
;;       auto-mode-alist
;;       )
;;      )

;; org mode C-c ' will open buffer each.
;; "<2" + "Tab" => you will insert your program Snippet.
(require 'org)
(setq org-src-fontify-natively t)
;; "M-<RET>", you could reset sequence.

(setq org-agenda-files '("~/org"))
(global-set-key (kbd "C-c a") 'org-agenda)
;; Usage
;; C-c C-s choose time you start
;; C-c C-d choose time you end
;; C-c a show menu and select which view(r)



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Courier New" :foundry "outline" :slant normal :weight normal :height 158 :width normal)))))
